import "SDL.h";

const turningSpeed = 0.008;
const movementSpeed = 0.002;
const deceleration = 0.002;
const playerSize = 10;

struct Player {
    Vector2 position;
    Vector2 velocity;
    float direction;
    List<Missile> missiles;
    float timeSinceLastMissileShot;

    Player() {
        position = Vector2(width / 2, height / 2);
        velocity = Vector2(0, 0);
        direction = 0;
        missiles = List();
        timeSinceLastMissileShot = 0;
    }

    void render(SDL_Renderer* renderer) {
        var a = Vector2(position.x - playerSize, position.y - playerSize);
        var b = Vector2(position.x - playerSize, position.y + playerSize);
        var c = Vector2(position.x + playerSize + playerSize, position.y);

        a = a.rotated(origin: position, angle: direction);
        b = b.rotated(origin: position, angle: direction);
        c = c.rotated(origin: position, angle: direction);

        for (var i in -1...1) {
            for (var j in -1...1) {
                var diff = Vector2(float(i) * width, float(j) * height);
                var aa = a + diff;
                var bb = b + diff;
                var cc = c + diff;
                SDL_RenderDrawLine(renderer, int(aa.x), int(aa.y), int(bb.x), int(bb.y));
                SDL_RenderDrawLine(renderer, int(bb.x), int(bb.y), int(cc.x), int(cc.y));
                SDL_RenderDrawLine(renderer, int(cc.x), int(cc.y), int(aa.x), int(aa.y));
            }
        }

        for (var missile in missiles) {
            missile.render(renderer);
        }
    }

    void update(float delta, GameState* state) {
        if (isKeyDown(SDL_SCANCODE_RIGHT)) {
            direction += turningSpeed * delta;
        }
        if (isKeyDown(SDL_SCANCODE_LEFT)) {
            direction -= turningSpeed * delta;
        }
        if (isKeyDown(SDL_SCANCODE_UP)) {
            velocity.x += cosf(direction) * movementSpeed * delta;
            velocity.y += sinf(direction) * movementSpeed * delta;
        }
        if (isKeyDown(SDL_SCANCODE_DOWN)) {
            velocity.x -= cosf(direction) * movementSpeed * delta;
            velocity.y -= sinf(direction) * movementSpeed * delta;
        }
        if (isKeyDown(SDL_SCANCODE_SPACE)) {
            shootMissile();
        }

        position.x += velocity.x * delta;
        position.y += velocity.y * delta;
        velocity.x *= 1 - deceleration * delta;
        velocity.y *= 1 - deceleration * delta;

        while (position.x < 0) position.x += width;
        while (position.y < 0) position.y += height;
        while (position.x >= width) position.x -= width;
        while (position.y >= height) position.y -= height;

        timeSinceLastMissileShot += delta;

        for (var missile in missiles) {
            missile.update(delta, state);
        }
    }

    void shootMissile() {
        if (timeSinceLastMissileShot > missileCooldown) {
            var position = this.position + Vector2(direction) * playerSize * 2 + Vector2(direction) * missileSize;
            missiles.push(Missile(position, direction));
            timeSinceLastMissileShot = 0;
        }
    }
}
