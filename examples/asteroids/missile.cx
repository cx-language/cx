import "SDL.h";

const missileSize = 20;
const missileSpeed = 0.3;
const missileCooldown = 200;

struct Missile {
    Vector2 position;
    float direction;

    void render(SDL_Renderer* renderer) {
        var a = position;
        var b = tailPosition();
        SDL_RenderDrawLine(renderer, int(a.x), int(a.y), int(b.x), int(b.y));
    }

    void update(float delta, GameState* state) {
        var velocity = Vector2(direction) * missileSpeed;
        position = position + velocity * delta;

        for (var i in 0..state.asteroids.size()) {
            var asteroid = state.asteroids[i];

            if (asteroid.position.distance(position) <= asteroid.size ||
                asteroid.position.distance(tailPosition()) <= asteroid.size) {
                state.asteroids.removeAt(i);
                break; // state.asteroids has been mutated, stop iteration.
            }
        }
    }

    Vector2 tailPosition() {
        return (position - Vector2(missileSize, 0)).rotated(origin: position, angle: direction);
    }
}
