# -*- Python -*-
# Configuration file for the LLVM Integrated Tester.

import lit.formats
import os
import platform
import subprocess

delta_path = lit_config.params.get("delta_path")
helper_scripts_path = lit_config.params.get("test_helper_scripts_path")

env = dict(os.environ)
# Uncomment this to print compiler stack traces for debugging test failures:
# env["DELTA_PRINT_STACK_TRACE"] = "true"

config.name = "Delta"
config.test_format = lit.formats.ShTest()
config.suffixes = [".delta"]
config.excludes = ["inputs"]
config.test_source_root = os.path.dirname(__file__)
config.substitutions.append(("%delta", delta_path))
config.substitutions.append(("%FileCheck", lit_config.params.get("filecheck_path") +
                             " -dump-input-on-failure -implicit-check-not error: -implicit-check-not note:"))
config.substitutions.append(("%not", lit_config.params.get("not_path")))
config.substitutions.append(("check_exit_status", "python '" + helper_scripts_path + "/check_exit_status'"))
config.substitutions.append(("check_matches_snapshot", "python '" + helper_scripts_path + "/check_matches_snapshot' '%s.ll'"))
# config.substitutions.append(("check_matches_snapshot", "true"))
config.substitutions.append(("check_matches_ir", "python '" + helper_scripts_path + "/check_matches_snapshot' '%s.ir'"))
config.substitutions.append(("cat", "python '" + helper_scripts_path + "/cat'"))
config.substitutions.append(("true", "python '" + helper_scripts_path + "/true'"))
config.environment = env
config.target_triple = ""
config.available_features.add(platform.system().lower())

try:
    proc_version = subprocess.check_output("cat /proc/version", shell=True, stderr=subprocess.STDOUT)
    if "Microsoft" in proc_version or "WSL" in proc_version:
        config.available_features.add("wsl")
except subprocess.CalledProcessError:
    pass
