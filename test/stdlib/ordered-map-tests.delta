// RUN: check_exit_status 0 compile_and_run -Werror %s

def main() {
    testInsertAndContains();
    testInsertAndDelete();
    testInsertAndSubscript();
    testLowerAndHigher();
    testFirstLast();
    testEmptyMapFunctions();
    testEmptyMapIterator();
    testIteratorOrder();
    testUnitMapIterator();
}

def testInsertAndContains() {
    var m = OrderedMap<int, int>();
    assert(m.size() == 0);

    m.insert(7, 8);
    assert(m.contains(7));

    for (var i in 0..10) {
        m.insert(i, i);
        assert(m.contains(i));
    }

    assert(!m.contains(42));
    assert(m.size() == 10);
}

def testInsertAndDelete() {
    var m = OrderedMap<int, int>();

    m.insert(42, 39);
    assert(m.contains(42));

    m.remove(42);
    assert(!m.contains(42));

    for (var i in 42..79) {
        m.insert(i, 42);
    }

    for (var i in 42..79) {
        assert(m.contains(i));
        m.remove(i);
        assert(!m.contains(i));
    }
}

def testInsertAndSubscript() {
    var m = OrderedMap<int, int>();

    m.insert(42, 39);
    assert(*m[42]! == 39);

    m.remove(42);

    for (var i in 42..79) {
        m.insert(i, i+7);
    }

    for (var i in 42..79) {
        assert(*m[i]! == i+7);

        m.remove(i);
        assert(m[i] == null);
    }
}

def testLowerAndHigher() {
    var m = OrderedMap<int, int>();

    for (var i in 0..100) {
        m.insert(i, i+6);
    }

    assert(m.lowerKey(0) == null);
    for (var i in 1..100) {
        assert(*m.lowerKey(i)! == i-1);
    }

    assert(m.higherKey(99) == null);
    for (var i in 0..99) {
        assert(*m.higherKey(i)! == i+1);
    }
}

def testFirstLast() {
    var m = OrderedMap<int, int>();

    m.insert(63, 3);
    m.insert(69, 3);
    m.insert(1, 3);
    m.insert(53, 3);

    assert(*m.first()! == 1);
    assert(*m.last()! == 69);
}

def testEmptyMapFunctions() {
    var m = OrderedMap<int, int>();

    assert(m.first() == null);
    assert(m.last() == null);
    assert(m.higherKey(48) == null);
    assert(m.lowerKey(42) == null);
}


def testIteratorOrder() {
    var map = OrderedMap<int, int>();

    for (var i in 0..100) {
        map.insert(i, i-12);
    }

    var called = 0;
    for (var e in map) {
        assert(e.key == called);
        assert(e.value == called - 12);
        called++;
    }

    assert(called == 100);

    map = OrderedMap<int, int>();

    for (var i in 0..100) {
        map.insert(99 - i, i-12);
    }

    called = 0;
    // Still in correct order
    for (var e in map) {
        assert(e.key == called);
        assert(e.value == 99 - called - 12);
        called++;
    }

    assert(called == 100);


}

def testEmptyMapIterator() {
    var map = OrderedMap<int, int>();
    map.insert(1, 2);
    map.insert(1, 2);
    map.remove(1);

    for (var e in map) {
        assert(false);
    }
}

def testUnitMapIterator() {
    var map = OrderedMap<int, int>();
    map.insert(1, 2);
    map.insert(1, 4);

    var count = 0;

    for (var e in map) {
        count++;
        assert(e.key == 1);
    }

    assert(count == 1);
}
