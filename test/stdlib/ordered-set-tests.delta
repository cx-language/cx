// RUN: check_exit_status 0 compile_and_run -Werror %s
// XFAIL: windows
// testIterator() segfaults on Windows for an unknown reason.

def main() {
    testInsert();
    testRemoval();
    testDuplicates();
    testIterator();
    testEmptyOrderedSetIterator();
    testUnitOrderedSetIterator();
    testFirstLast();
    testLowerAndHigher();
    testEmptyOrderedSetFunctions();
    testIteratorOrder();
}

def testInsert() {
    var s = OrderedSet<int>();

    s.insert(42);

    assert(s.contains(42));
    assert(!s.contains(39));
}


def testRemoval() {
    var s = OrderedSet<int>();

    s.insert(42);
    assert(s.contains(42));

    s.remove(42);
    assert(!s.contains(42));
}

def testDuplicates() {
    var s = OrderedSet<int>();

    s.insert(42);
    s.insert(42);
    assert(s.contains(42));

    s.remove(42);
    assert(!s.contains(42));
}

def testIterator() {
    var s = OrderedSet<int>();

    s.insert(1);
    s.insert(2);
    s.insert(3);
    s.insert(1);
    s.insert(2);
    s.insert(2);

    var a = false;
    var bb = false;
    var ccc = false;

    for (var e in s) {
        if (*e == 1) {
            assert(!a);
            a = true;
        } else if (*e == 2) {
            assert(!bb);
            bb = true;
        } else if (*e == 3) {
            assert(!ccc);
            ccc = true;
        } else {
            assert(false);
        }
    }

    assert(a);
    assert(bb);
    assert(ccc);
}

def testEmptyOrderedSetIterator() {
    var s = OrderedSet<int>();
    s.insert(79);
    s.insert(79);
    s.remove(79);

    for (var e in s) {
        assert(false);
    }
}

def testUnitOrderedSetIterator() {
    var s = OrderedSet<int>();
    s.insert(79);
    s.insert(79);
    var count = 0;

    for (var e in s) {
        count++;
        assert(*e == 79);
    }

    assert(count == 1);
}

def testLowerAndHigher() {
    var m = OrderedSet<int>();

    for (var i in 0..100) {
        m.insert(i);
    }

    assert(m.lower(0) == null);
    for (var i in 1..100) {
        assert(*m.lower(i)! == i-1);
    }

    assert(m.higher(99) == null);
    for (var i in 0..99) {
        assert(*m.higher(i)! == i+1);
    }
}

def testFirstLast() {
    var s = OrderedSet<uint>();

    s.insert(63);
    s.insert(69);
    s.insert(1);
    s.insert(53);

    assert(*s.first()! == 1);
    assert(*s.last()! == 69);
}

def testEmptyOrderedSetFunctions() {
    var s = OrderedSet<uint>();

    assert(s.first() == null);
    assert(s.last() == null);
    assert(s.higher(48) == null);
    assert(s.lower(42) == null);
}

def testIteratorOrder() {
    var set = OrderedSet<uint>();

    for (var i in 0..100) {
        set.insert(uint(i));
    }

    var called: uint = 0;
    for (var e in set) {
        assert(*e == called);
        called++;
    }

    assert(called == 100);

    set = OrderedSet<uint>();

    for (var i in 0..100) {
        set.insert(uint(99 - i));
    }

    called = 0;
    // Still in correct order
    for (var e in set) {
        assert(*e == called);
        called++;
    }

    assert(called == 100);
}
