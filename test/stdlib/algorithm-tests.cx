// RUN: check-snapshots
// RUN: check_exit_status 0 %cx run -Werror %s

void main() {
    testAllAnyNone();
    testInsertionSort();
    testQuickSort();
    testMax();
}

void testAllAnyNone() {
    assert((0...3).all(x -> x < 4));
    assert(!(0..3).all(x -> x != 2));
    assert("abc".any(x -> x == 'c'));
    assert(!StringBuffer("abc").any(x -> x == 'd'));
    assert(List([0,1,2,3]).none(x -> x > 3));
    assert(ArrayRef<int>().none(x -> true));
}

void testInsertionSort() {
    var a = List<int>();
    for (var i in 0..5) {
        a.push(5 - i);
    }

    var real = List<int>();
    for (var i in 0..5) {
        real.push(i + 1);
    }

    sort(a);

    assert(ArrayRef(a) == ArrayRef(real));
}

void testQuickSort() {
    var a = List<int>();

    for (var i in 0..64) {
        a.push(64 - i);
    }

    var real = List<int>();

    for (var i in 0..64) {
        real.push(i + 1);
    }

    sort(a);

    assert(ArrayRef(a) == ArrayRef(real));
}

void testMax() {
    assert(max(7, 9) == 9);
}
