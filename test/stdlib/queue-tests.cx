// RUN: check_exit_status 0 %cx run -Werror %s

void main() {
    testPushPop();
    testEmpty();
    testPushAfterPop();
    testFirst();
}

void testPushPop() {
    var q = Queue<int>();

    assert(q.size() == 0);
    q.push(23);
    q.push(48);

    assert(q.size() == 2);

    var elem = q.pop();
    assert(q.size() == 1);
    assert(elem == 23);

    elem = q.pop();

    assert(elem == 48);
    assert(q.size() == 0);
}

void testEmpty() {
    var q = Queue<string>();

    assert(q.empty());

    q.push("foo");
    assert(!q.empty());
    q.push("bar");
    assert(!q.empty());
    q.pop();
    q.pop();
    assert(q.empty());
}

void testPushAfterPop() {
    var q = Queue<string>();

    q.push("foo");
    assert(q.size() == 1);
    q.pop();
    assert(q.size() == 0);
    q.push("bar");
    assert(q.size() == 1);
    q.pop();
    assert(q.size() == 0);
}

void testFirst() {
    var q = Queue<string>();

    q.push("foo");
    q.push("bar");
    assert(q.first() == "foo");
    assert(q.pop() == "foo");
    assert(q.first() == "bar");
    assert(q.pop() == "bar");
}
