// RUN: check_exit_status 0 compile_and_run -Werror %s

struct C {
    var i: int;

    init(i: int) {
        this.i = i;
    }

    deinit() {}
}

def main() {
    testArrayInsertionAndRemoval();
    testArrayInitFromLiteral();
    testArrayIterator();
    testArrayMutatingIteration();
    testArrayEnumeratedIterator();
    testEmpty();
    testMap();
    testFilter();
    testElementDestruction();
}

def testArrayInsertionAndRemoval() {
    var a = Array<C>();
    assert(a.size() == 0 && a.capacity() >= 0);

    a.push(C(1));
    assert(a[0].i == 1);

    a.push(C(2));
    a.push(C(3));
    a.removeAt(1);
    assert(a[0].i == 1 && a[1].i == 3);

    a.removeLast();
    a.push(C(4));
    assert(a.size() == 2 && a.capacity() >= 2);
}

def testArrayInitFromLiteral() {
    var a = Array([1, 2, 3]);

    assert(*a[0] == 1);
    assert(*a[1] == 2);
    assert(*a[2] == 3);
}

def testArrayIterator() {
    var array = Array<C>();
    array.push(C(1));
    array.push(C(4));

    var iterator = array.iterator();

    assert(iterator.hasValue());
    assert(iterator.value().i == 1);

    iterator.increment();
    assert(iterator.hasValue());
    assert(iterator.value().i == 4);

    iterator.increment();
    assert(!iterator.hasValue());
}

def testArrayMutatingIteration() {
    var a = Array<int>();
    a.push(1);
    a.push(2);
    a.push(3);

    for (var e in a) {
        (*e)++;
    }

    assert(*a[0] == 2);
    assert(*a[1] == 3);
    assert(*a[2] == 4);
}

def testArrayEnumeratedIterator() {
    var a = Array<int>();
    a.push(9000);
    a.push(-1234);
    a.push(0xcafe);

    var iterator = a.enumerate();

    assert(iterator.hasValue());
    assert(iterator.value().index == 0);
    assert(*iterator.value().value == 9000);

    iterator.increment();
    assert(iterator.hasValue());
    assert(iterator.value().index == 1);
    assert(*iterator.value().value == -1234);

    iterator.increment();
    assert(iterator.hasValue());
    assert(iterator.value().index == 2);
    assert(*iterator.value().value == 0xcafe);

    iterator.increment();
    assert(iterator.value().index == 3);
    assert(!iterator.hasValue());
}

def testEmpty() {
    var a = Array<int>();

    assert(a.isEmpty());

    a.push(7);

    assert(!a.isEmpty());
}

def testMap() {
    var a = Array<int>();
    a.push(1);
    a.push(2);
    a.push(3);
    a.push(4);

    var b = a.map((value: int*) -> *value > 2);
    assert(b.size() == 4);
    assert(*b[0] == false);
    assert(*b[1] == false);
    assert(*b[2] == true);
    assert(*b[3] == true);
}

def testFilter() {
    var a = Array<int>();
    a.push(1);
    a.push(2);
    a.push(3);
    a.push(4);

    var b = a.filter((value: int*) -> *value % 2 == 0);
    assert(b.size() == 2);
    assert(*b[0] == 2);
    assert(*b[1] == 4);
}

var deinits = 0;

struct DestructionTester {
    init() {}

    deinit() {
        deinits++;
    }
}

def testElementDestruction() {
    var a = Array<DestructionTester>();

    for (var i in 0..50) {
        a.push(DestructionTester());
    }

    a.removeAt(25);
    a.removeAt(25);
    a.removeAt(25);
    a.removeLast();
    a.removeFirst();

    assert(deinits == 5);
}
