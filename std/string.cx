struct string: Copyable, Comparable, Hashable, Printable {
    ArrayRef<char> characters;

    string(char* pointer, int length) {
        characters = ArrayRef(pointer, length);
    }

    /// Initializes a string referring to a null-terminated C-style string.
    ///
    /// __Note:__ This constructor has a time complexity of O(n) because it has to calculate the
    /// length of the argument string. If you know the length beforehand, consider using
    /// `string(char* pointer, int length)` instead.
    ///
    string(char* cString) {
        characters = ArrayRef(cString, int(strlen(cString)));
    }

    string(StringBuffer* string) {
        characters = ArrayRef(string.data(), string.size());
    }

    bool empty() {
        return characters.size() == 0;
    }

    int size() {
        return characters.size();
    }

    /// Returns the first character.
    char front() {
        return characters.front();
    }

    /// Returns the character at the given index.
    char operator[](int index) {
        return characters[index];
    }

    char[*] data() {
        return characters.data();
    }

    bool contains(char c) {
        return find(c, 0) != size();
    }

    /// Returns the index of the given character, or the size if it's not found.
    int find(char c) {
        return find(c, 0);
    }

    // TODO: Do we need 'find(char, int)', because basically the same can be accomplish with `substr(start).find(c)`?
    /// Returns the index of the given character, or the size if it's not found. Starts from `start`.
    int find(char c, int start) {
        for (var i in start..size()) {
            if (characters[i] == c) {
                return i;
            }
        }
        return size();
    }

    /// Returns the substring of the string starting from the given index, until the end of the string.
    string substr(int start) {
        if (start < 0 || start > size()) {
            indexOutOfBounds("substr", start);
        }
        return string(&characters.data()[start], size() - start);
    }

    /// Returns the substring of the string in the given range, [inclusive, exclusive]
    string substr(Range<int> range) {
        if (range.start < 0 || range.start > size()) {
            indexOutOfBounds("substr", range.start);
        }
        if (range.end < 0 || range.end > size()) {
            indexOutOfBounds("substr", range.end);
        }
        return string(&characters.data()[range.start], range.size());
    }

    /// Supports using strings with sets and dicts
    uint64 hash() {
        uint64 hashValue = 5381;

        for (var index in 0..characters.size()) {
            hashValue = ((hashValue << 5) + hashValue) + uint64(this[index]);
        }

        return hashValue;
    }

    StringIterator iterator() {
        return StringIterator(this);
    }

    /// Returns an iterator over each line in the string.
    LineIterator lines() {
        return LineIterator(this);
    }

    /// Returns an iterator over each byte in the string.
    ByteIterator bytes() {
        return ByteIterator(this);
    }

    // TODO: Support plus and minus signs, non-base-10 numbers, and handle range errors.
    int? parseInt() {
        if (empty()) {
            return null;
        }

        int result = 0;

        for (var c in this) {
            if (c >= '0' && c <= '9') {
                result *= 10;
                result += int(c - '0');
            } else {
                return null;
            }
        }

        return result;
    }

    // TODO: return iterator instead of eagerly allocating?
    StringBuffer escape() {
        var result = StringBuffer();

        for (var c in this) {
            switch (c) {
                case '\0': result += "\\0";
                case '\n': result += "\\n";
                case '\r': result += "\\r";
                case '\t': result += "\\t";
                case '\"': result += "\\\"";
                case '\\': result += "\\\\";
                default:   result += c;
            }
        }

        return result;
    }

    void print(StringBuffer* stream) {
        stream.write(this);
    }

    Ordering compare(string* other) {
        for (var index in 0..min(size(), other.size())) {
            if (this[index] < other[index]) { return Ordering.Less; }
            if (this[index] > other[index]) { return Ordering.Greater; }
        }
        if (size() < other.size()) { return Ordering.Less; }
        if (size() > other.size()) { return Ordering.Greater; }
        return Ordering.Equal;
    }

    bool all(bool(char) predicate) { return all(iterator(), predicate); }
    bool any(bool(char) predicate) { return any(iterator(), predicate); }
    bool none(bool(char) predicate) { return none(iterator(), predicate); }

    private void indexOutOfBounds(string function, int index) {
        abort("string.", function, ": index ", index, " is out of bounds, size is ", size());
    }
}

bool operator==(string a, string b) {
    if (a.size() != b.size()) {
        return false;
    }

    for (var index in 0..a.size()) {
        if (a[index] != b[index]) {
            return false;
        }
    }

    return true;
}

bool operator==(char* a, string b) {
    return string(a) == b;
}

bool operator!=(char* a, string b) {
    return string(a) != b;
}

bool operator==(string a, char* b) {
    return a == string(b);
}

bool operator!=(string a, char* b) {
    return a != string(b);
}
