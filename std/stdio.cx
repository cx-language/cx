void println<T>(T* value) {
    print(value);
    print('\n');
}

void println<T: Copyable>(T value) {
    print(value);
    print('\n');
}

void println(const char[*]? value) {
    print(value);
    print('\n');
}

void print<T: Printable>(T value) {
    var s = value.toString();
    printf("%.*s", s.size(), s.data());
}

void print<T: Printable>(T* value) {
    var s = value.toString();
    printf("%.*s", s.size(), s.data());
}

void print<T: Printable>(List<T>* list) {
    print(ArrayRef(list));
}

void print<T: Printable>(ArrayRef<T> array) {
    print('[');

    for (var index in 0..array.size()) {
        print(array[index]);

        if (index != array.size() - 1)
            print(", ");
    }

    print(']');
}

void print<T: Printable>(Optional<T>* optional) {
    if (optional.hasValue) {
        print(optional.value);
    } else {
        print("null");
    }
}

void print(const char[*]? cString) {
    if (cString) {
        printf(cString);
    } else {
        printf("null");
    }
}

// TODO: Make 'print'/'println' variadic functions when those are implemented.
void println<T0: Printable, T1: Printable>(T0* _0, T1* _1) { print(_0); print(_1); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable>(T0* _0, T1* _1, T2* _2) { print(_0); print(_1); print(_2); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable>(T0* _0, T1* _1, T2* _2, T3* _3) { print(_0); print(_1); print(_2); print(_3); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable, T4: Printable>(T0* _0, T1* _1, T2* _2, T3* _3, T4* _4) { print(_0); print(_1); print(_2); print(_3); print(_4); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable, T4: Printable, T5: Printable>(T0* _0, T1* _1, T2* _2, T3* _3, T4* _4, T5* _5) { print(_0); print(_1); print(_2); print(_3); print(_4); print(_5); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable, T4: Printable, T5: Printable, T6: Printable>(T0* _0, T1* _1, T2* _2, T3* _3, T4* _4, T5* _5, T6* _6) { print(_0); print(_1); print(_2); print(_3); print(_4); print(_5); print(_6); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable, T4: Printable, T5: Printable, T6: Printable, T7: Printable>(T0* _0, T1* _1, T2* _2, T3* _3, T4* _4, T5* _5, T6* _6, T7* _7) { print(_0); print(_1); print(_2); print(_3); print(_4); print(_5); print(_6); print(_7); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable, T4: Printable, T5: Printable, T6: Printable, T7: Printable, T8: Printable>(T0* _0, T1* _1, T2* _2, T3* _3, T4* _4, T5* _5, T6* _6, T7* _7, T8* _8) { print(_0); print(_1); print(_2); print(_3); print(_4); print(_5); print(_6); print(_7); print(_8); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable, T4: Printable, T5: Printable, T6: Printable, T7: Printable, T8: Printable, T9: Printable>(T0* _0, T1* _1, T2* _2, T3* _3, T4* _4, T5* _5, T6* _6, T7* _7, T8* _8, T9* _9) { print(_0); print(_1); print(_2); print(_3); print(_4); print(_5); print(_6); print(_7); print(_8); print(_9); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable, T4: Printable, T5: Printable, T6: Printable, T7: Printable, T8: Printable, T9: Printable, T10: Printable>(T0* _0, T1* _1, T2* _2, T3* _3, T4* _4, T5* _5, T6* _6, T7* _7, T8* _8, T9* _9, T10* _10) { print(_0); print(_1); print(_2); print(_3); print(_4); print(_5); print(_6); print(_7); print(_8); print(_9); print(_10); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable, T4: Printable, T5: Printable, T6: Printable, T7: Printable, T8: Printable, T9: Printable, T10: Printable, T11: Printable>(T0* _0, T1* _1, T2* _2, T3* _3, T4* _4, T5* _5, T6* _6, T7* _7, T8* _8, T9* _9, T10* _10, T11* _11) { print(_0); print(_1); print(_2); print(_3); print(_4); print(_5); print(_6); print(_7); print(_8); print(_9); print(_10); print(_11); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable, T4: Printable, T5: Printable, T6: Printable, T7: Printable, T8: Printable, T9: Printable, T10: Printable, T11: Printable, T12: Printable>(T0* _0, T1* _1, T2* _2, T3* _3, T4* _4, T5* _5, T6* _6, T7* _7, T8* _8, T9* _9, T10* _10, T11* _11, T12* _12) { print(_0); print(_1); print(_2); print(_3); print(_4); print(_5); print(_6); print(_7); print(_8); print(_9); print(_10); print(_11); print(_12); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable, T4: Printable, T5: Printable, T6: Printable, T7: Printable, T8: Printable, T9: Printable, T10: Printable, T11: Printable, T12: Printable, T13: Printable>(T0* _0, T1* _1, T2* _2, T3* _3, T4* _4, T5* _5, T6* _6, T7* _7, T8* _8, T9* _9, T10* _10, T11* _11, T12* _12, T13* _13) { print(_0); print(_1); print(_2); print(_3); print(_4); print(_5); print(_6); print(_7); print(_8); print(_9); print(_10); print(_11); print(_12); print(_13); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable, T4: Printable, T5: Printable, T6: Printable, T7: Printable, T8: Printable, T9: Printable, T10: Printable, T11: Printable, T12: Printable, T13: Printable, T14: Printable>(T0* _0, T1* _1, T2* _2, T3* _3, T4* _4, T5* _5, T6* _6, T7* _7, T8* _8, T9* _9, T10* _10, T11* _11, T12* _12, T13* _13, T14* _14) { print(_0); print(_1); print(_2); print(_3); print(_4); print(_5); print(_6); print(_7); print(_8); print(_9); print(_10); print(_11); print(_12); print(_13); print(_14); print('\n'); }
void println<T0: Printable, T1: Printable, T2: Printable, T3: Printable, T4: Printable, T5: Printable, T6: Printable, T7: Printable, T8: Printable, T9: Printable, T10: Printable, T11: Printable, T12: Printable, T13: Printable, T14: Printable, T15: Printable>(T0* _0, T1* _1, T2* _2, T3* _3, T4* _4, T5* _5, T6* _6, T7* _7, T8* _8, T9* _9, T10* _10, T11* _11, T12* _12, T13* _13, T14* _14, T15* _15) { print(_0); print(_1); print(_2); print(_3); print(_4); print(_5); print(_6); print(_7); print(_8); print(_9); print(_10); print(_11); print(_12); print(_13); print(_14); print(_15); print('\n'); }

StringBuffer readLine() {
    var line = StringBuffer();

    while (true) {
        var c = getchar();

        if (c == '\n' || c < 0) {
            break;
        }

        line.push(char(c));
    }

    return line;
}

StringBuffer readFile(string path) {
    var file = fopen(StringBuffer(path).cString(), "rb");
    if (!file) return StringBuffer(); // FIXME: Return null on error.
    defer fclose(file);

    fseek(file, 0, SEEK_END);
    var size = ftell(file);
    fseek(file, 0, SEEK_SET);

    var content = StringBuffer(uninitializedSize: int(size));
    fread(content.data(), sizeof(char), uint64(size), file);

    return content;
}

bool writeFile(string path, string content) {
    var file = fopen(StringBuffer(path).cString(), "wb");
    if (!file) return false;
    defer fclose(file);

    fwrite(content.data(), sizeof(char), uint64(content.size()), file);
    return true;
}

void assertFail(const char* message) {
    var stream = fdopen(2, "w");
    if (stream) {
        fprintf(stream, message);
        fclose(stream);
    }
    abortWrapper();
}
