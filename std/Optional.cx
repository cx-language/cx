// TODO: Convert into enum once generic enums are supported.
struct Optional<T> {
    bool hasValue;
    T value;

    Optional() {
        hasValue = false;
        value = undefined;
    }

    Optional(T value) {
        hasValue = true;
        this.value = value;
    }
}

bool operator== <T: Comparable>(ref Optional<T> a, ref Optional<T> b) {
    //if ((a != null) != (b != null)) return false;
    //if (b == null) return true;
    if (a == null && b == null) return true;
    if (a == null) return false;
    if (b == null) return false;
    return a.value == b.value;
}

bool operator!= <T: Comparable>(ref Optional<T> a, ref Optional<T> b) {
    return !(a == b);
}

bool operator== <T: Comparable>(ref Optional<T> a, ref T b) {
    if (a == null) return false;
    return a.value == b;
}

bool operator!= <T: Comparable>(ref Optional<T> a, ref T b) {
    return !(a == b);
}

bool operator== <T: Comparable>(T*? a, ref T b) {
    if (a == null) return false;
    return *a == b;
}
