/// An iterator is an object used to traverse the elements of a sequence.
interface Iterator<Element> {

    /// Returns true if there's at least one element remaining in the sequence, i.e. if calling
    /// `value()` is allowed.
    bool hasValue();

    /// Returns the next element from the sequence. Calling this function is not allowed if
    /// `hasValue()` returns false.
    Element value();

    /// Advances the iterator to the next element in the sequence. Calling this function is not
    /// allowed if `hasValue()` returns false.
    void increment();
}

// FIXME: Taking 'it' by value causes a miscompilation that stores 'it' into a value for calling the methods,
// thus preventing 'it' from being mutated, resulting in an infinite loop.
bool all<T, I>(I* it, bool(T) predicate) {
    for (; it.hasValue(); it.increment()) {
        if (!predicate(it.value())) {
            return false;
        }
    }
    return true;
}

bool any<T, I>(I* it, bool(T) predicate) {
    for (; it.hasValue(); it.increment()) {
        if (predicate(it.value())) {
            return true;
        }
    }
    return false;
}

bool none<T, I>(I* it, bool(T) predicate) {
    for (; it.hasValue(); it.increment()) {
        if (predicate(it.value())) {
            return false;
        }
    }
    return true;
}
