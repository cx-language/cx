/// An iterator is an object used to traverse the elements of a sequence.
interface Iterator<T> {

    /// Returns true if there's at least one element remaining in the sequence, i.e. if calling
    /// `value()` is allowed.
    bool hasValue();

    /// Returns the next element from the sequence. Calling this function is not allowed if
    /// `hasValue()` returns false.
    T value();

    /// Advances the iterator to the next element in the sequence. Calling this function is not
    /// allowed if `hasValue()` returns false.
    void increment();

    bool all(bool(T) predicate) {
//        for (var e in this) {
//            if (!predicate(e)) {
//                return false;
//            }
//        }
        return true;
    }

    bool any(bool(T) predicate) {
//        for (var e in this) {
//            if (predicate(e)) {
//                return true;
//            }
//        }
        return false;
    }

    bool none(bool(T) predicate) {
//         for (var e in this) {
//             if (predicate(e)) {
//                 return false;
//             }
//         }
         return true;
     }
}
