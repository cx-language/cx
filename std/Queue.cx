/// First-in-first-out data structure
struct Queue<T> {
    Node<T>&? head;
    Node<T>&? tail;
    int size;

    /// Initialize an empty Queue
    Queue() {
        head = null;
        tail = null;
        size = 0;
    }

    ~Queue() {
        while (!empty()) {
            var next = head!.next;
            deallocate(head);
            head = next;
        }
    }

    /// Add to the back of the queue
    void push(T value) {
        var newNode = allocate(Node(value));

        if (empty()) {
            head = newNode;
            tail = newNode;
        } else {
            tail!.next = newNode;
            tail = newNode;
        }

        size++;
    }

    /// Retrieve and remove head of the queue
    T pop() {
        var value = head!.value;
        var next = head.next;
        deallocate(head);
        head = next;

        if (head == null) {
            tail = null;
        }

        size--;
        return value;
    }

    /// Access element in the front of the queue
    T& first() {
        return head!.value;
    }

    /// Returns the number of elements in the queue
    int size() {
        return size;
    }

    /// Check if queue is empty
    bool empty() {
        return head == null;
    }
}

struct Node<T> {
    Node<T>&? next;
    T value;

    Node(T val) {
        this.value = val;
        this.next = null;
    }
}
