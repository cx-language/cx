struct ClosedRange<T>: Copyable, Iterable<T, ClosedRangeIterator<T>> {
    T start;
    T end;

    ClosedRange(T start, T end) {
        this.start = start;
        this.end = end;
    }

    ClosedRange(T end) {
        init(0, end);
    }

    // Returns the number of elements this range contains.
    T size() {
        return end - start + 1;
    }

    // Alias for size
    T length() {
        return size();
    }

    T start() {
        return start;
    }

    T end() {
        return end;
    }

    ClosedRangeIterator<T> iterator() {
        return ClosedRangeIterator(this);
    }
//
//    // TODO: Remove these once implicit into-iterator conversions have been implemented.
//    bool all(bool(T) predicate) { return iterator().all(predicate); }
//    bool any(bool(T) predicate) { return iterator().any(predicate); }
//    bool none(bool(T) predicate) { return iterator().none(predicate); }
}
