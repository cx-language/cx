/// A type whose instances have an inherent sort-order, i.e. can be compared with the `<`, `<=`,
/// `>`, `>=` operators.
interface Comparable {
    /// Returns `Ordering.Less` if `this` is less than `other`, `Ordering.Equal` if `this` is equal
    /// to `other`, or `Ordering.Greater` if `this` is greater than `other`.
    Ordering compare(This* other);
}

enum Ordering {
    Less,
    Equal,
    Greater
}

bool operator== <T: Comparable>(T* a, T* b) {
    return a.compare(b) == Ordering.Equal;
}

bool operator!= <T: Comparable>(T* a, T* b) {
    return a.compare(b) != Ordering.Equal;
}

bool operator< <T: Comparable>(T* a, T* b) {
    return a.compare(b) == Ordering.Less;
}

bool operator> <T: Comparable>(T* a, T* b) {
    return a.compare(b) == Ordering.Greater;
}

bool operator>= <T: Comparable>(T* a, T* b) {
    return a.compare(b) != Ordering.Less;
}

bool operator<= <T: Comparable>(T* a, T* b) {
    return a.compare(b) != Ordering.Greater;
}
