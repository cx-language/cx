struct Set<T: Hashable>: Iterable<T, SetIterator<T>> {
    Map<T, bool> map;

    /// Initializes an empty set
    Set() {
        map = Map();
    }

    /// Inserts an element into the set. If the element exists already, nothing is done.
    void insert(T key) {
        map.insert(key, false);
    }

    /// Removes an element from the set, if it exists there.
    void remove(T* key) {
        map.remove(key);
    }

    /// Checks if e is part of the set.
    bool contains(T* key) {
        return map.contains(key);
    }

    int size() {
        return map.size();
    }

    bool empty() {
        return map.empty();
    }

    SetIterator<T> iterator() {
        return SetIterator(this);
    }
//
//    // TODO: Remove these once implicit into-iterator conversions have been implemented.
//    bool all(bool(T*) predicate) { return iterator().all(predicate); }
//    bool any(bool(T*) predicate) { return iterator().any(predicate); }
//    bool none(bool(T*) predicate) { return iterator().none(predicate); }
}
