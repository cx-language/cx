struct MapEntry<Key: Hashable, Value> {
    Key key;
    Value value;
}

struct Map<Key: Hashable, Value> {
    List<List<MapEntry<Key, Value>>> hashTable;
    int size;

    /// Initializes an empty map
    Map() {
        size = 0;
        hashTable = List();
        increaseTableSize(hashTable, 128);
    }

    // FIXME: Should assert that the key is not in the map, instead of no-oping.
    /// Inserts an element into the map. If the element exists already, nothing is done.
    void insert(Key key, Value value) {
        if (contains(key)) {
            return;
        }

        var hashValue = convertHash(key.hash()) % capacity();
        hashTable[hashValue].push(MapEntry(key, value));
        size++;

        if (loadFactor() > 0.66) {
            resize();
        }
    }

    /// Inserts, or updates an existing value.
    void set(Key key, Value value) {
        var existing = this[key];

        if (existing) {
            *existing = value;
        } else {
            insert(key, value);
        }
    }

    /// Removes an element from the map, if it exists there.
    void remove(Key* e) {
        var hashValue = convertHash(e.hash()) % capacity();
        var slot = hashTable[hashValue];

        if (slot.size() == 0) {
            return;
        }

        for (var i in 0..slot.size()) {
            if (slot[i].key == *e) {
                slot.removeAt(i);
                size--;
                return;
            }
        }
    }

    /// Expands the hash table size, needed when there's too many elements in the map
    void increaseTableSize(List<List<MapEntry<Key, Value>>>* newTable, int newCapacity) {
        for (var i in 0..newCapacity) {
            newTable.push(List<MapEntry<Key, Value>>());
        }
    }

    int size() {
        return size;
    }

    int capacity() {
        return hashTable.size();
    }

    /// Resizes the map. This includes copying the old table into a new, bigger one
    void resize() {
        var newTable = List<List<MapEntry<Key, Value>>>();
        var newCapacity = capacity() * 2;

        increaseTableSize(newTable, newCapacity);

        for (var i in 0..capacity()) {
            var slot = hashTable[i];

            for (var el in slot) {
                newTable[convertHash(el.key.hash()) % newCapacity].push(*el);
            }
        }

        hashTable = newTable;
    }

    Value*? operator[](Key* e) {
        var hashValue = convertHash(e.hash()) % capacity();
        var slot = hashTable[hashValue];

        for (var element in slot) {
            if (element.key == *e) {
                return element.value;
            }
        }

        return null;
    }

    /// Checks if e is part of the map.
    bool contains(Key* e) {
        var hashValue = convertHash(e.hash()) % capacity();
        var slot = hashTable[hashValue];

        if (slot.size() == 0) {
            return false;
        }

        for (var element in slot) {
            if (element.key == *e) {
                return true;
            }
        }

        return false;
    }

    bool empty() {
        return size == 0;
    }

    /// Returns the load factor for the map. This is used to increase the map size once
    /// the load factor gets too big.
    float64 loadFactor() {
        return float64(size) / (float64(capacity()));
    }

    /// Iterate over the map
    MapIterator<Key, Value> iterator() {
        return MapIterator(this);
    }
}

int convertHash(uint64 hash) {
    return int(hash) & int_max;
}
