/// An ordered Set that supports fast lookup, insertion and deletion.
struct OrderedSet<Element> {
    OrderedMap<Element, bool> map;

    /// Initiates an empty Set.
    OrderedSet() {
        map = OrderedMap();
    }

    /// Inserts an element into the Set.
    bool insert(Element e) {
        return map.insert(e, false);
    }

    /// Returns true if the Set contains `e`, otherwise false.
    bool contains(Element* e) {
        return map.contains(e);
    }

    /// Removes an element from the Set, if it exists.
    void remove(Element* e) {
        map.remove(e);
    }

    /// Returns the value immediately lower than `e`, or `null` if
    /// `e` is the smallest element in the Set.
    Element*? lower(Element* e) {
        return map.lowerKey(e);
    }

    /// Returns the value immediately higher than `e`, or `null` if
    /// `e` is the largest element in the Set.
    Element*? higher(Element* e) {
        return map.higherKey(e);
    }

    /// Returns the smallest element in the Set, or `null` if the Set is empty.
    Element*? first() {
        return map.first();
    }

    /// Returns the largest element in the Set, or `null` if the Set is empty.
    Element*? last() {
        return map.last();
    }

    /// Returns the size of the Set.
    int size() {
        return map.size();
    }

    /// Returns true if the Set is empty, otherwise false.
    bool empty() {
        return map.size() == 0;
    }

    /// Iterate over the map, in order
    OrderedSetIterator<Element> iterator() {
        return OrderedSetIterator(this);
    }
}
