// TODO: Convert these to static members of the corresponding integer type:
const int int_max = 2147483647;
const int8 int8_max = 127;
const int16 int16_max = 32767;
const int32 int32_max = 2147483647;
const int64 int64_max = 9223372036854775807;

const int int_min = -2147483648;
const int8 int8_min = -128;
const int16 int16_min = -32768;
const int32 int32_min = -2147483648;
const int64 int64_min = -9223372036854775808;

const uint uint_max = 4294967295;
const uint8 uint8_max = 255;
const uint16 uint16_max = 65535;
const uint32 uint32_max = 4294967295;
const uint64 uint64_max = 18446744073709551615;

const uint uint_min = 0;
const uint8 uint8_min = 0;
const uint16 uint16_min = 0;
const uint32 uint32_min = 0;
const uint64 uint64_min = 0;

// TODO: Remove code duplication by declaring an 'Integer' interface that implements the 'compare'
// function for all integer types.

// TODO: Improve print() implementations: optimize + don't depend on libc + don't assume size of int.

private void printSigned<T>(T value, StringBuffer& stream) {
    char[22] result = undefined;
    sprintf(result, "%lld", value);
    stream.write(string(result));
}

private void printUnsigned<T>(T value, StringBuffer& stream) {
    char[22] result = undefined;
    sprintf(result, "%llu", value);
    stream.write(string(result));
}

struct int: Copyable, Comparable, Printable, Hashable {
    Ordering compare(int& other) {
        return this < other ? Ordering.Less : this > other ? Ordering.Greater : Ordering.Equal;
    }

    void print(StringBuffer& stream) {
        printSigned(this, stream);
    }

    uint64 hash() {
        return uint64(this);
    }
}

struct int8: Copyable, Comparable, Printable, Hashable {
    Ordering compare(int8& other) {
        return this < other ? Ordering.Less : this > other ? Ordering.Greater : Ordering.Equal;
    }

    void print(StringBuffer& stream) {
        printSigned(this, stream);
    }

    uint64 hash() {
        return uint64(this);
    }
}

struct int16: Copyable, Comparable, Printable, Hashable {
    Ordering compare(int16& other) {
        return this < other ? Ordering.Less : this > other ? Ordering.Greater : Ordering.Equal;
    }

    void print(StringBuffer& stream) {
        printSigned(this, stream);
    }

    uint64 hash() {
        return uint64(this);
    }
}

struct int32: Copyable, Comparable, Printable, Hashable {
    Ordering compare(int32& other) {
        return this < other ? Ordering.Less : this > other ? Ordering.Greater : Ordering.Equal;
    }

    void print(StringBuffer& stream) {
        printSigned(this, stream);
    }

    uint64 hash() {
        return uint64(this);
    }
}

struct int64: Copyable, Comparable, Printable, Hashable {
    Ordering compare(int64& other) {
        return this < other ? Ordering.Less : this > other ? Ordering.Greater : Ordering.Equal;
    }

    void print(StringBuffer& stream) {
        printSigned(this, stream);
    }

    uint64 hash() {
        return uint64(this);
    }
}

struct uint: Copyable, Comparable, Printable, Hashable {
    Ordering compare(uint& other) {
        return this < other ? Ordering.Less : this > other ? Ordering.Greater : Ordering.Equal;
    }

    void print(StringBuffer& stream) {
        printUnsigned(this, stream);
    }

    uint64 hash() {
        return uint64(this);
    }
}

struct uint8: Copyable, Comparable, Printable, Hashable {
    Ordering compare(uint8& other) {
        return this < other ? Ordering.Less : this > other ? Ordering.Greater : Ordering.Equal;
    }

    void print(StringBuffer& stream) {
        printUnsigned(this, stream);
    }

    uint64 hash() {
        return uint64(this);
    }
}

struct uint16: Copyable, Comparable, Printable, Hashable {
    Ordering compare(uint16& other) {
        return this < other ? Ordering.Less : this > other ? Ordering.Greater : Ordering.Equal;
    }

    void print(StringBuffer& stream) {
        printUnsigned(this, stream);
    }

    uint64 hash() {
        return uint64(this);
    }
}

struct uint32: Copyable, Comparable, Printable, Hashable {
    Ordering compare(uint32& other) {
        return this < other ? Ordering.Less : this > other ? Ordering.Greater : Ordering.Equal;
    }

    void print(StringBuffer& stream) {
        printUnsigned(this, stream);
    }

    uint64 hash() {
        return uint64(this);
    }
}

struct uint64: Copyable, Comparable, Printable, Hashable {
    Ordering compare(uint64& other) {
        return this < other ? Ordering.Less : this > other ? Ordering.Greater : Ordering.Equal;
    }

    void print(StringBuffer& stream) {
        printUnsigned(this, stream);
    }

    uint64 hash() {
        return this;
    }
}
