struct StringBuffer: Comparable, Hashable, Printable {
    List<char> characters;

    /// Initializes an empty string.
    StringBuffer() {
        characters = List();
        characters.push('\0');
    }

    /// Initializes an empty string with pre-allocated capacity.
    StringBuffer(public int capacity) {
        init();
        characters.reserve(capacity);
    }

    StringBuffer(string s) {
        characters = List(capacity: s.size() + 1);

        for (var ch in s) {
            characters.push(ch);
        }

        characters.push('\0');
    }

    /// Initializes a string with the characters from a character array of known length.
    StringBuffer(char* pointer, int length) {
        init(string(pointer, length));
    }

    /// Initializes a string with the contents of a null-terminated C-style string.
    ///
    /// __Note:__ This constructor has a time complexity of O(n) because it has to calculate the
    /// length of the argument string. If you know the length beforehand, consider using
    /// `StringBuffer(char* pointer, int length)` instead.
    ///
    StringBuffer(char* cString) {
        init(string(cString, int(strlen(cString))));
    }

    /// Initializes the buffer to contain the given number of uninitialized bytes.
    StringBuffer(public int uninitializedSize) {
        characters = List(uninitializedSize: uninitializedSize + 1);
        characters[uninitializedSize] = '\0';
    }

    int size() {
        return characters.size() - 1;
    }

    /// Returns the character at the given index.
    char operator[](int index) {
        return characters[index];
    }

    /// Sets the character at the given index.
    void operator[]=(int index, char c) {
        characters[index] = c;
    }

    /// Returns the string as a C-style, i.e. null-terminated, string.
    /// Modifying `this` after calling this function invalidates the returned pointer.
    char* cString() {
        return data();
    }

    /// Returns a pointer to the first character in the string.
    char[*] data() {
        return characters.data();
    }

    bool empty() {
        return size() == 0;
    }

    void push(char c) {
        characters[size()] = c;
        characters.push('\0');
    }

    bool write(string s) {
        // TODO: Optimize
        for (var ch in s) {
            push(ch);
        }
        return true;
    }

    /// Removes the first character from the string.
    /// Other characters are moved towards the beginning of the string by one index.
    void removeFirst() {
        characters.removeFirst();
    }

    /// Removes the last character from the string.
    void removeLast() {
        characters.removeAt(characters.size() - 2);
    }

    /// Supports using strings with sets and dicts
    uint64 hash() {
        return string(this).hash();
    }

    StringIterator iterator() {
        // TODO: When implicit constructors have been implemented, remove the string() call below.
        return StringIterator(string(this));
    }

    bool contains(char c) {
        return find(c, 0) != size();
    }

    /// Returns the index of the given character, or the size if it's not found.
    int find(char c) {
        return find(c, 0);
    }

    /// Returns the index of the given character, or the size if it's not found. Starts from `start`.
    int find(char c, int start) {
        for (var i in start..size()) {
            if (characters[i] == c) {
                return i;
            }
        }
        return size();
    }

    /// Returns the substring of the string starting from the given index, until the end of the string.
    string substr(int start) {
        if (start < 0 || start > size()) {
            indexOutOfBounds("substr", start);
        }
        return string(&characters.data()[start], size() - start);
    }

    /// Returns the substring of the string in the given range, [inclusive, exclusive]
    string substr(Range<int> range) {
        if (range.start < 0 || range.start > size()) {
            indexOutOfBounds("substr", range.start);
        }
        if (range.end < 0 || range.end > size()) {
            indexOutOfBounds("substr", range.end);
        }
        return string(&characters.data()[range.start], range.size());
    }

    // Splits the string by the given delimiter
    List<string> split(char delim) {
        var tokens = List<string>();
        var prev = 0;
        var pos = 0;

        while (true) {
            pos = find(delim, prev);
            var token = substr(prev..pos);
            tokens.push(token);
            prev = pos + 1;

            if (pos > size() || prev > size()) {
                break;
            }
        }

        return tokens;
    }

    // Splits the string by whitespace
    List<string> split() {
        return split(' ');
    }

    int? parseInt() {
        return string(this).parseInt();
    }

    StringBuffer escape() {
        return string(this).escape();
    }

    void print(StringBuffer* stream) {
        stream.write(string(this));
    }

    Ordering compare(StringBuffer* other) {
        return string(this).compare(string(other));
    }

    // TODO: Remove these once implicit into-iterator conversions have been implemented.
    bool all(bool(char) predicate) { return all(iterator(), predicate); }
    bool any(bool(char) predicate) { return any(iterator(), predicate); }
    bool none(bool(char) predicate) { return none(iterator(), predicate); }

    private void indexOutOfBounds(string function, int index) {
        abort("StringBuffer.", function, ": index ", index, " is out of bounds, size is ", size());
    }
}

StringBuffer operator+(string a, string b) {
    var result = StringBuffer();

    for (var ch in a) {
        result.push(ch);
    }

    for (var ch in b) {
        result.push(ch);
    }

    return result;
}

StringBuffer operator+(string a, char b) {
    return a + string(b, 1);
}

StringBuffer operator+(string a, char[*] b) {
    return a + string(b);
}

StringBuffer operator+(StringBuffer a, string b) {
    var result = a; // TODO: Workaround until parameters can be mutated.

    for (var ch in b) {
        result.push(ch);
    }

    return result;
}

StringBuffer operator+(StringBuffer a, char b) {
    var result = a; // TODO: Workaround until parameters can be mutated.
    result.push(b);
    return result;
}

StringBuffer operator+(StringBuffer a, char[*] b) {
    return a + string(b);
}

bool operator==(ref StringBuffer a, ref StringBuffer b) {
    return string(a) == string(b);
}

bool operator==(ref StringBuffer a, string b) {
    return string(a) == b;
}

bool operator!=(ref StringBuffer a, string b) {
    return string(a) != b;
}

bool operator==(string a, ref StringBuffer b) {
    return a == string(b);
}

bool operator!=(string a, ref StringBuffer b) {
    return a != string(b);
}

bool operator==(char[*] a, ref StringBuffer b) {
    return string(a) == string(b);
}

bool operator!=(char[*] a, ref StringBuffer b) {
    return string(a) != string(b);
}

bool operator==(ref StringBuffer a, char[*] b) {
    return string(a) == string(b);
}

bool operator!=(ref StringBuffer a, char[*] b) {
    return string(a) != string(b);
}
