/// Allocates a block of dynamic memory to hold the given value, moves the value into the memory
/// block, and returns a pointer to it. The block can be freed by passing the returned pointer to a
/// call to `deallocate`.
///
/// If the memory allocation fails, the program crashes (when compiled in checked mode) or invokes
/// undefined behavior (when compiled in unchecked mode).
///
Type* allocate<Type>(Type value) {
    var allocation = cast<Type*>(malloc(sizeof(Type))!);
    allocation.init(value);
    return allocation;
}

/// Allocates a block of dynamic memory to hold the given value, moves the value into the memory
/// block, and returns a pointer to it. The block can be freed by passing the returned pointer to a
/// call to `deallocate`.
///
/// If the memory allocation fails, null is returned.
///
Type*? safeAllocate<Type>(Type value) {
    var allocation = cast<Type*?>(malloc(sizeof(Type)));
    if (allocation != null) {
        allocation.init(value);
    }
    return allocation;
}

/// Allocates a block of dynamic memory to hold an array with the given element type and size, and
/// returns a pointer to the array. The elements of the array are uninitialized. The block can be
/// freed by passing the returned pointer to a call to `deallocate`.
///
/// If the memory allocation fails, the program crashes (when compiled in checked mode) or invokes
/// undefined behavior (when compiled in unchecked mode).
///
Type[*] allocateArray<Type>(int size) {
    return cast<Type[*]>(malloc(sizeof(Type) * uint64(size))!);
}

/// Allocates a block of dynamic memory to hold an array with the given element type and size, and
/// returns a pointer to the array. The elements of the array are uninitialized. The block can be
/// freed by passing the returned pointer to a call to `deallocate`.
///
/// If the memory allocation fails, null is returned.
///
Type[*]? safeAllocateArray<Type>(int size) {
    return cast<Type[*]?>(malloc(sizeof(Type) * uint64(size)));
}

/// Deallocates a block of dynamic memory that was previously allocated by a call to `allocate`,
/// `allocateArray`, `safeAllocate`, or `safeAllocateArray`. If the argument is null, no operation
/// is performed.
void deallocate<Type>(Type allocation) {
    free(allocation);
}

// TODO: Add 'deallocate' overloads back?

/// Deallocates a block of dynamic memory that was previously allocated by a call to `allocate` or `safeAllocate`.
//void deallocate<Type>(Type* allocation) {
//    free(allocation);
//}

/// Deallocates a block of dynamic memory that was previously allocated by a call to `allocate` or `safeAllocate`.
/// If the argument is null, no operation is performed.
//void deallocate<Type>(Type*? allocation) {
//    free(allocation);
//}

/// Deallocates a block of dynamic memory that was previously allocated by a call to `allocateArray` or `safeAllocateArray`.
//void deallocate<Type>(Type[*] allocation) {
//    free(allocation);
//}

/// Deallocates a block of dynamic memory that was previously allocated by a call to `allocateArray` or `safeAllocateArray`.
/// If the argument is null, no operation is performed.
//void deallocate<Type>(Type[*]? allocation) {
//    free(allocation);
//}
