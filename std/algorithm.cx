/// Public members

/// Gives the maximum of the two elements
T* max<T>(T* a, T* b) {
    if (a >= b) {
        return a;
    }
    return b;
}

/// Gives the minimum of the two elements
T* min<T>(T* a, T* b) {
    if (a < b) {
        return a;
    }
    return b;
}

/// Swaps two items in place
void swap<E>(E* a, E* b) {
    var t = *a;
    *a = *b;
    *b = t;
}

// TODO: Use ArrayRef instead of List.
/// Sorts a array. Uses insertion sort if the array is small enough, and quickSort otherwise.
void sort<E: Comparable>(List<E>* array)  {
    if (array.size() <= 32) {
        insertionSort(array);
    } else {
        quickSort(array, 0, array.size() - 1);
    }
}

/// Private members

// TODO: Use ArrayRef instead of List.
private int partition<E: Comparable>(List<E>* arr, int low, int high) {
    var pivot = arr[high];
    var i = low - 1;

    for (var j in low..high) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    if (arr[high] < arr[i+1]) {
        swap(arr[i + 1], arr[high]);
    }
    return i + 1;
}

// TODO: Use ArrayRef instead of List.
/// Quicksorts the given array, in place. Not stable.
private void quickSort<E: Comparable>(List<E>* arr, int low, int high) {
    if (low < high) {
        var index = partition(arr, low, high);

        if (low < index) {
            quickSort(arr, low, index - 1);
        }
        if (index < high) {
            quickSort(arr, index + 1, high);
        }
    }
}

// TODO: Use ArrayRef instead of List.
/// Insertion sorts the given array, in place. Good for small arrays.
private void insertionSort<E: Comparable>(List<E>* arr) {
    var i = 1;
    while (i < arr.size()) {
        var j = i;
        while (j > 0 && arr[j-1] > arr[j]) {
            swap(arr[j], arr[j-1]);
            j--;
        }
        i++;
    }
}
