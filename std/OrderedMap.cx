/// An ordered key-value container that supports fast insertion, deletion and lookup
struct OrderedMap<Key, Value> {
    AVLnode<Key, Value>*? root;
    int size;

    OrderedMap() {
        root = null;
        size = 0;
    }

    ~OrderedMap() {
        if (root != null) {
            root.deallocate();
        }
    }

    /// Returns the size of the Map
    int size() {
        return size;
    }

    /// Returns true if the Map is empty, otherwise false
    bool empty() {
        return size == 0;
    }

    private void rebalance(AVLnode<Key, Value>* node) {
        var n = node;
        setBalance(n);

        if (n.balance == -2) {
            if (height(n.left!.left) >= height(n.left.right)) {
                n = rotateRight(n);
            } else {
                n = rotateLeftThenRight(n);
            }
        } else if (n.balance == 2) {
            if (height(n.right!.right) >= height(n.right.left)) {
                n = rotateLeft(n);
            } else {
                n = rotateRightThenLeft(n);
            }
        }

        if (n.parent != null) {
            rebalance(n.parent);
        } else {
            root = n;
        }
    }

    private AVLnode<Key, Value>* rotateLeft(AVLnode<Key, Value>* node) {
        var a = node;
        var b = a.right!;
        b.parent = a.parent;
        a.right = b.left;

        if (a.right != null) {
            a.right.parent = a;
        }

        b.left = a;
        a.parent = b;

        if (b.parent != null) {
            if (b.parent.right == a) {
                b.parent.right = b;
            } else {
                b.parent.left = b;
            }
        }

        setBalance(a);
        setBalance(b);
        return b;
    }

    private AVLnode<Key, Value>* rotateRight(AVLnode<Key, Value>* node) {
        var a = node;
        var b = a.left!;
        b.parent = a.parent;
        a.left = b.right;

        if (a.left != null) {
            a.left.parent = a;
        }

        b.right = a;
        a.parent = b;

        if (b.parent != null) {
            if (b.parent.right == a) {
                b.parent.right = b;
            } else {
                b.parent.left = b;
            }
        }

        setBalance(a);
        setBalance(b);
        return b;
    }

    private AVLnode<Key, Value>* rotateLeftThenRight(AVLnode<Key, Value>* n) {
        n.left = rotateLeft(n.left!);
        return rotateRight(n);
    }

    private AVLnode<Key, Value>* rotateRightThenLeft(AVLnode<Key, Value>* n) {
        n.right = rotateRight(n.right!);
        return rotateLeft(n);
    }

    private int height(AVLnode<Key, Value>*? n) {
        if (n == null) {
            return -1;
        }
        return 1 + max(height(n.left), height(n.right));
    }

    private void setBalance(AVLnode<Key, Value>* n) {
        n.balance = height(n.right) - height(n.left);
    }

    /// Checks if the given element is in the Map. Returns true if it is, otherwise false
    bool contains(Key* key) {
        return findNode(key) != null;
    }

    /// Returns the value of the given key, if it exists in the Map. Otherwise, returns null.
    Value*? operator[](Key* key) {
        var found = findNode(key);
        if (found != null) {
            return found.entry.value;
        }
        return null;
    }

    /// Inserts a key-value pair into the Map.
    bool insert(Key key, Value value) {
        if (root == null) {
            root = allocate(AVLnode(key, null, value));
        } else {
            var n = root;

            while (true) {
                if (n.entry.key == key) {
                    return false;
                }

                var parent = n;
                var goLeft = n.entry.key > key;
                var newNode = goLeft ? n.left : n.right;

                if (newNode == null) {
                    if (goLeft) {
                        parent.left = allocate(AVLnode<Key, Value>(key, parent, value)); // TODO: Should work without specifying generic arguments.
                    } else {
                        parent.right = allocate(AVLnode<Key, Value>(key, parent, value));
                    }

                    rebalance(parent);
                    break;
                }
                n = newNode;
            }
        }

        size++;
        return true;
    }

    /// Removes a key and it's associated value from the Map
    void remove(Key* key) {
        if (root == null) {
            return;
        }

        var n = root;
        var parent = root;
        AVLnode<Key, Value>*? delNode = null;
        AVLnode<Key, Value>*? child = root;

        while (child != null) {
            parent = n;
            n = child;
            child = *key >= n.entry.key ? n.right : n.left;
            if (*key == n.entry.key) {
                delNode = n;
            }
        }

        if (delNode != null) {
            delNode.entry.key = n.entry.key;
            delNode.entry.value = n.entry.value;

            child = n.left != null ? n.left : n.right;

            if (root.entry.key == *key) {
                root = child;
            } else {
                if (parent.left == n) {
                    parent.left = child;
                } else {
                    parent.right = child;
                }

                rebalance(parent);
            }
            n.deinit();
            deallocate(n);
        }
        size--;
    }

    /// Returns the key-value pair corresponding to `key`, or null if it doesn't exist in the Map
    MapEntry<Key, Value>*? find(Key* key) {
        var node = findNode(key);
        if (node != null) {
            return node.entry;
        }
        return null;
    }

    /// Returns the node corresponding to `key`, or null if it doesn't exist in the Map
    AVLnode<Key, Value>*? findNode(Key* key) {
        var n = root;

        while (true) {
            if (n == null) {
                return null;
            }

            if (n.entry.key == *key) {
                return n;
            }

            var goLeft = n.entry.key > *key;
            n = goLeft ? n.left : n.right;
        }

        return null;
    }

    /// Returns the key immediately smaller than the one given,
    /// or null, if `key` is the smallest in the Map.
    Key*? lowerKey(Key* key) {
        var found = findNode(key);
        if (found == null) {
            return null;
        }
        var lower = lowerNode(found);

        if (lower == null) {
            return null;
        }
        return lower.entry.key;
    }

    private AVLnode<Key, Value>* maxInSubtree(AVLnode<Key, Value>* node) {
        var n = node;
        while (n.right != null) {
            n = n.right;
        }
        return n;
    }

    private AVLnode<Key, Value>* minInSubtree(AVLnode<Key, Value>* node) {
        var n = node;
        while (n.left != null) {
            n = n.left;
        }
        return n;
    }

    /// Returns the node that contains the key immediately smaller than the key of the given node,
    /// or null, if the key of `node` is the smallest value.
    AVLnode<Key, Value>*? lowerNode(AVLnode<Key, Value>* node) {
        if (node.left != null) {
            return maxInSubtree(node.left);
        }

        var n = node;
        while (n.parent != null) {
            if (n == n.parent.right) {
                return n.parent;
            }
            n = n.parent;
        }
        return null;
    }

    /// Returns the key immediately higher than the one given,
    /// or null, if `key` is the largest in the Map.
    Key*? higherKey(Key* key) {
        var found = findNode(key);
        if (found == null) {
            return null;
        }

        var higher = higherNode(found);

        if (higher == null) {
            return null;
        }
        return higher.entry.key;
    }

    /// Returns the node that contains the key immediately larger than the key of the given node,
    /// or null, if the key of `node` is the largest value.
    AVLnode<Key, Value>*? higherNode(AVLnode<Key, Value>* node) {
        if (node.right != null) {
            return minInSubtree(node.right);
        }

        var n = node;
        while (n.parent != null) {
            if (n == n.parent.left) {
                return n.parent;
            }
            n = n.parent;
        }
        return null;
    }

    /// Returns the smallest element in the Map, or null if the Map is empty.
    Key*? first() {
        if (root == null) {
            return null;
        }
        return minInSubtree(root).entry.key;
    }

    /// Returns the node with the smallest key in the Map, or null if the Map is empty.
    AVLnode<Key, Value>*? firstNode() {
        if (root == null) {
            return null;
        }
        return minInSubtree(root);
    }

    /// Returns the largest element in the Map, or null if the map is empty.
    Key*? last() {
        if (root == null) {
            return null;
        }
        return maxInSubtree(root).entry.key;
    }

    /// Returns the node with the largest key in the Map, or null if the Map is empty.
    AVLnode<Key, Value>*? lastNode() {
        if (root == null) {
            return null;
        }
        return maxInSubtree(root);
    }

    /// Iterate over the map, in order
    OrderedMapIterator<Key, Value> iterator() {
        return OrderedMapIterator(this);
    }
}

/// One node in the AVL tree
struct AVLnode<Key, Value> {
    MapEntry<Key, Value> entry;
    int balance;
    AVLnode<Key, Value>*? parent;
    AVLnode<Key, Value>*? left;
    AVLnode<Key, Value>*? right;

    AVLnode(Key key, AVLnode<Key, Value>*? parent, Value value) {
        this.entry = MapEntry(key, value);
        this.parent = parent;
        this.balance = 0;
        this.left = null;
        this.right = null;
    }

    void deallocate() {
        if (left != null) {
            left.deallocate();
        }
        if (right != null) {
            right.deallocate();
        }
        deallocate(this);
    }
}
